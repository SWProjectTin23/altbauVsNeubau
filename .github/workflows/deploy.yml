# .github/workflows/deploy.yml

name: Deploy to Internal Server

# This workflow is triggered manually for now.
# This is good for the initial test.
# Later, you can configure it to trigger automatically after a successful CI run.
on:
  workflow_dispatch:

# Defines the deployment job
jobs:
  deploy_to_internal:
    name: Deploy Project to Internal Server
    # This job runs on your self-hosted runner.
    # Make sure your self-hosted runner is installed on your internal server and actively running.
    runs-on: self-hosted

    # Optional: Ensures this job only runs if the CI workflow (ci.yml) was successful.
    # If you uncomment this line, replace 'docker_build_check' with the actual job name
    # from your ci.yml that performs the Docker builds and tests.
    # needs: docker_build_check

    steps:
    - name: Checkout Code
      # Clones the GitHub repository into the runner's working directory.
      # Since the runner is on your internal server, this happens directly there.
      uses: actions/checkout@v4

    - name: Navigate to project directory and update Git
      # Navigates to the actual root directory of your project on the server.
      # Then, it pulls the latest changes from the 'main' branch.
      # **IMPORTANT:** Replace '/opt/altbauVsNeubau' with the **correct path** on your server
      # where your project and `docker-compose.yml` are located!
      run: |
        echo "Navigating to '/opt/altbauVsNeubau' and updating code..."
        cd /opt/altbauVsNeubau/ || { echo "Error: Project directory not found or access denied!"; exit 1; }
        git pull origin main
        echo "Code successfully updated on the server."

    - name: Rebuild and Start Docker Compose Services
      # This step stops currently running containers, builds new images based on the latest code,
      # and then restarts the services.
      # **IMPORTANT:** Also adjust the path '/altbauVsNeubau_test/altbauVsNeubau' here!
      run: |
        echo "Starting Docker Compose deployment process..."
        cd /altbauVsNeubau_test/altbauVsNeubau || { echo "Error: Project directory not found!"; exit 1; }
        # Stops and removes all old/orphaned containers
        docker-compose down --remove-orphans
        # Builds new images, forces recreation of containers, and starts them in detached mode
        # '--wait' waits until services are 'healthy' (if defined in docker-compose.yml).
        # '--timeout 180' sets a 3-minute timeout for startup.
        docker-compose up -d --build --force-recreate --wait --timeout 180
        echo "Docker Compose deployment completed."

    - name: Check Status of Docker Compose Services (optional)
      # Displays the current status of your running Docker Compose services.
      # Useful for a quick check after deployment.
      run: |
        echo "Checking service status..."
        cd /opt/altbauVsNeubau/ || { echo "Error: Project directory not found!"; exit 1; }
        docker-compose ps
        echo "Service status check finished."

    - name: Deployment Successful!
      run: echo "Your project has been successfully deployed to the internal server!"
