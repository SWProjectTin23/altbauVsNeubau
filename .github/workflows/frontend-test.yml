name: Frontend JMeter Smoke

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  jmeter-frontend:
    runs-on: ubuntu-latest

    env:
      # SLOs & Pfade
      SLO_INITIAL_P95_MS: "2000"
      SLO_INTERVAL_P95_MS: "300"
      JM_RESULTS_DIR: frontend-loadtest/results

      # Compose-ENV (deine bestehenden Secrets)
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      MQTT_BROKER: ${{ secrets.MQTT_BROKER }}
      MQTT_PORT: ${{ secrets.MQTT_PORT }}
      PG_ADMIN_EMAIL: ${{ secrets.PG_ADMIN_EMAIL }}
      PG_ADMIN_PASSWORD: ${{ secrets.PG_ADMIN_PASSWORD }}

      # üîê JMeter/Runner-ENV aus Secrets
      NO_OPEN: "1"  # Browser im CI nicht √∂ffnen
      TARGET_URL: ${{ secrets.TARGET_URL }}
      API_BASE:  ${{ secrets.API_BASE }}
      USERS:     ${{ secrets.USERS }}
      RAMP:      ${{ secrets.RAMP }}
      COMPOSE_NETWORK: ${{ secrets.COMPOSE_NETWORK }}  # optional, siehe Hinweis

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start app stack (backend, frontend, db)
        run: |
          docker compose up -d --wait
          docker compose ps

      # optional, sehr empfohlen gegen CRLF-Probleme
      - name: Normalize LF (runner + optional .env)
        run: |
          sed -i 's/\r$//' frontend-loadtest/run-jmeter.sh || true
          sed -i 's/\r$//' frontend-loadtest/.env || true
          chmod +x frontend-loadtest/run-jmeter.sh

      - name: Quick reachability checks
        run: |
          curl -f http://localhost:3000/ || (echo "Frontend not reachable" && exit 1)
          curl -f http://localhost:5001/health || (echo "Backend health failed" && exit 1)

      - name: Run JMeter smoke (no browser open)
        working-directory: frontend-loadtest
        run: ./run-jmeter.sh
        shell: bash

      - name: Upload JMeter artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-report
          path: |
            frontend-loadtest/results/report/**
            frontend-loadtest/results/results.jtl
            frontend-loadtest/results/jmeter.log

      - name: Evaluate SLOs (fail build if thresholds exceeded)
        run: |
          python3 - <<'PY'
          import csv, os, sys, numpy as np
          jtl = os.path.join(os.getenv("JM_RESULTS_DIR"), "results.jtl")
          if not os.path.exists(jtl):
              print("No JTL file found at", jtl); sys.exit(1)
          rows = []
          with open(jtl, newline='') as f:
              r = csv.DictReader(f)
              for x in r:
                  try:
                      x['elapsed']=float(x.get('elapsed','nan')); x['label']=x.get('label','')
                      rows.append(x)
                  except: pass
          def pctl(a,q): 
              a=[v for v in a if v==v]; 
              return float(np.percentile(a,q)) if a else float('nan')
          by={}
          for x in rows: by.setdefault(x['label'],[]).append(x['elapsed'])
          slo_init=float(os.getenv("SLO_INITIAL_P95_MS","2000"))
          slo_int=float(os.getenv("SLO_INTERVAL_P95_MS","300"))
          fail=[]
          if 'Initial Page TTLB' in by:
              p95=pctl(by['Initial Page TTLB'],95); print(f"Initial Page TTLB p95={p95:.0f}ms (<{slo_init})")
              if p95>slo_init: fail.append(f"Initial p95 {p95:.0f}>{slo_init}")
          for lab in ['Click 3h','Click 1d','Click 1w','Click 1m']:
              if lab in by:
                  p95=pctl(by[lab],95); print(f"{lab} p95={p95:.0f}ms (<{slo_int})")
                  if p95>slo_int: fail.append(f"{lab} p95 {p95:.0f}>{slo_int}")
          if fail: print("SLO FAIL:", "; ".join(fail)); sys.exit(1)
          print("SLO PASS")
          PY

      - name: Show logs (always)
        if: always()
        run: |
          echo "--- Backend API Logs ---"
          docker compose logs backend-api || true
          echo "--- Frontend Logs ---"
          docker compose logs frontend || true
          echo "--- DB Logs ---"
          docker compose logs db || true

      - name: Tear down
        if: always()
        run: docker compose down -v --remove-orphans
