name: Frontend JMeter Smoke

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  jmeter-frontend:
    runs-on: ubuntu-latest

    env:
      # SLOs (anpassbar): Fail, wenn p95 dr√ºber liegt
      SLO_INITIAL_P95_MS: "2000"     # Initial Page TTLB p95 < 2.0s
      SLO_INTERVAL_P95_MS: "300"     # Interval transactions p95 < 300ms
      JM_RESULTS_DIR: frontend-loadtest/results

      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      MQTT_BROKER: ${{ secrets.MQTT_BROKER }}
      MQTT_PORT: ${{ secrets.MQTT_PORT }}
      PG_ADMIN_EMAIL: ${{ secrets.PG_ADMIN_EMAIL }}
      PG_ADMIN_PASSWORD: ${{ secrets.PG_ADMIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start app stack (backend, frontend, db)
        run: |
          docker compose up -d --wait
          docker compose ps

      - name: Quick reachability checks
        run: |
          curl -f http://localhost:3000/ || (echo "Frontend not reachable" && exit 1)
          curl -f http://localhost:5001/health || (echo "Backend health failed" && exit 1)

      - name: Run JMeter smoke (no browser open)
        working-directory: frontend-loadtest
        run: |
          NO_OPEN=1 USERS=15 RAMP=15 ./run-jmeter.sh
        shell: bash

      - name: Upload JMeter artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-report
          path: |
            frontend-loadtest/results/report/**
            frontend-loadtest/results/results.jtl
            frontend-loadtest/results/jmeter.log

      - name: Evaluate SLOs (fail build if thresholds exceeded)
        run: |
          python3 - <<'PY'
          import csv, os, sys, statistics
          import numpy as np
          jtl = os.path.join(os.getenv("JM_RESULTS_DIR"), "results.jtl")
          if not os.path.exists(jtl):
              print("No JTL file found at", jtl); sys.exit(1)

          # read JTL (CSV with headers)
          rows = []
          with open(jtl, newline='') as f:
              reader = csv.DictReader(f)
              for r in reader:
                  try:
                      r['elapsed'] = float(r.get('elapsed', 'nan'))
                      r['label'] = r.get('label','')
                      r['success'] = (r.get('success','').lower() == 'true')
                      rows.append(r)
                  except: pass

          def pctl(vals, q):
              a = [v for v in vals if v==v]  # drop NaNs
              if not a: return float('nan')
              return float(np.percentile(a, q))

          # group by label
          by_label = {}
          for r in rows:
              by_label.setdefault(r['label'], []).append(r['elapsed'])

          slo_init = float(os.getenv("SLO_INITIAL_P95_MS", "2000"))
          slo_int  = float(os.getenv("SLO_INTERVAL_P95_MS", "300"))

          # labels we care about
          init_label = "Initial Page TTLB"
          interval_labels = ["Click 3h","Click 1d","Click 1w","Click 1m"]

          failures = []

          if init_label in by_label:
              p95 = pctl(by_label[init_label], 95)
              print(f"{init_label} p95 = {p95:.0f} ms (SLO < {slo_init} ms)")
              if p95 > slo_init: failures.append(f"{init_label} p95 {p95:.0f} > {slo_init}")
          else:
              print(f"WARNING: label '{init_label}' not found in JTL")

          for lab in interval_labels:
              if lab in by_label:
                  p95 = pctl(by_label[lab], 95)
                  print(f"{lab} p95 = {p95:.0f} ms (SLO < {slo_int} ms)")
                  if p95 > slo_int: failures.append(f"{lab} p95 {p95:.0f} > {slo_int}")
              else:
                  print(f"WARNING: label '{lab}' not found in JTL")

          if failures:
              print("SLO FAIL:", "; ".join(failures))
              sys.exit(1)
          print("SLO PASS")
          PY

      - name: Show logs (always)
        if: always()
        run: |
          echo "--- Backend API Logs ---"
          docker compose logs backend-api || true
          echo "--- Frontend Logs ---"
          docker compose logs frontend || true
          echo "--- DB Logs ---"
          docker compose logs db || true

      - name: Tear down
        if: always()
        run: docker compose down -v --remove-orphans
