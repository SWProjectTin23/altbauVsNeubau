services:
  backend:
    container_name: altbau_vs_neubau_backend # A fixed name for the container
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
        - "5001:5000" # Host port 5001 mapped to container port 5000
    environment:
      - FLASK_APP=app.app:create_app
      - FLASK_RUN_HOST=0.0.0.0
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
    networks:
    - pg-network

  frontend:
    container_name: altbau_vs_neubau_frontend # a fixed name for the container
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - backend
    networks: # Connects the container to the same internal network as the DB
      - pg-network

  db:
    image: timescale/timescaledb:latest-pg14
    container_name: altbau_vs_neubau_db # a fixed name for the container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - db_data:/var/lib/postgresql/data
    networks:
      - pg-network
    

  pgadmin: # The name of your pgAdmin service
    image: dpage/pgadmin4 # The Docker image for pgAdmin
    container_name: altbau_vs_neubau_pgadmin # a fixed name for the container
    environment: # Environment variables for pgAdmin
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL} # Login email for pgAdmin
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD} # Login password for pgAdmin
    ports: # Port mapping from host to container
      - "5480:80" # pgAdmin is accessible at http://localhost:5480
    depends_on: # Ensures that the DB starts before pgAdmin
      - db
    networks: # Connects the container to the same internal network as the DB
      - pg-network
    restart: unless-stopped

volumes:
  db_data:

networks: # Definition of networks
  pg-network:
    driver: bridge # Standard bridge network