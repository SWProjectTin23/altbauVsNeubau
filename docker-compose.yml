services:
  backend-api:
    container_name: altbau_vs_neubau_api # A fixed name for the container
    build:
        context: ./backend
        dockerfile: Dockerfile.api
    ports:
      - "5001:5000" # Exposes 5001 on the host, forwards to 5000 in the container
    environment:
      - FLASK_APP=api:create_app
      - FLASK_RUN_HOST=0.0.0.0
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - GF_SMTP_HOST=${GF_SMTP_HOST}
      - GF_SMTP_USER=${GF_SMTP_USER}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
      - GF_SMTP_FROM=${GF_SMTP_FROM}
      - GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME}
      - FRONTEND_URL=${FRONTEND_URL}
      - JWKS_URL=${JWKS_URL}
      - CLIENT_ID=${CLIENT_ID}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pg-network
    healthcheck:
      # IMPORTANT: Health check inside the container must use the internal port (5000)
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend-mqtt:
    container_name: altbau_vs_neubau_mqtt
    build:
      context: ./backend
      dockerfile: Dockerfile.mqtt
    depends_on:
      db:
        condition: service_healthy
    environment:
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER_BACKUP=${MQTT_BROKER_BACKUP}
      - MQTT_PORT_BACKUP=${MQTT_PORT_BACKUP}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=INFO
    networks:
      - pg-network
    restart: unless-stopped

  frontend:
    container_name: altbau_vs_neubau_frontend # a fixed name for the container
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:80"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      backend-api:
        condition: service_healthy
    networks:
      - pg-network
    healthcheck:
      # IMPORTANT: Health check inside the container must use the internal port (3000)
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  db:
    image: timescale/timescaledb:latest-pg14
    container_name: altbau_vs_neubau_db # a fixed name for the container
    environment:
      - POSTGRES_USER=${DB_USER}          
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
      - ./db/availability_sensor.sql:/docker-entrypoint-initdb.d/02_availability_sensor.sql:ro
      - db_data:/var/lib/postgresql/data
    networks:
      - pg-network
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${DB_USER} -d ${DB_NAME} -c 'SELECT 1;' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 60s # Longer start period for the database
    restart: unless-stopped

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    ports:
      - "3002:3001"
    restart: unless-stopped
    networks:
      - pg-network

  prometheus: 
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - pg-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      GF_EXPLORE_ENABLED: "true"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT:-5432}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"

      GF_SECURITY_ADMIN_USER: "${GRAFANA_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-admin}"

      GF_USERS_DEFAULT_THEME: "light"
      GF_USERS_ALLOW_SIGN_UP: "false"

      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: "${GF_SMTP_HOST}"
      GF_SMTP_USER: "${GF_SMTP_USER}"
      GF_SMTP_PASSWORD: "${GF_SMTP_PASSWORD}"
      GF_SMTP_FROM_ADDRESS: "${GF_SMTP_FROM}"
      GF_SMTP_FROM_NAME: "${GF_SMTP_FROM_NAME}"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - pg-network
    restart: unless-stopped

  sensor-exporter:
    build:
      context: .
      dockerfile: sensor-exporter/Dockerfile
    container_name: sensor-exporter
    ports:
      - "9100:9100"
    environment:
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER_BACKUP=${MQTT_BROKER_BACKUP}
      - MQTT_PORT_BACKUP=${MQTT_PORT_BACKUP}
    networks:
      - pg-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.6
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/config.yml:ro  
      - loki-data:/loki
    networks:
      - pg-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.6
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - promtail-data:/tmp
    depends_on:
      - loki
    networks:
      - pg-network
    restart: unless-stopped

# Keycloak 
  kc-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${KC_POSTGRES_DB}
      POSTGRES_USER: ${KC_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KC_POSTGRES_PASSWORD}
    ports:
      - "5444:5432"
    volumes:
      - kc_pg_data:/var/lib/postgresql/data

  keycloak:
    image: keycloak/keycloak:26.3
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
    ports:
      - "8844:8080"
    depends_on:
      - kc-postgres
    volumes:
      - ./keycloak-export/export/timsicher-realm.json:/opt/keycloak/data/import/timsicher-realm.json:ro
    command: >
      start-dev
      --import-realm

volumes: 
  db_data:
  kc_pg_data:
  kuma-data:
  grafana-data:
  loki-data:
  promtail-data:

networks: # Definition of networks
  pg-network:
    driver: bridge
