services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - FLASK_APP=app:create_app
      - FLASK_APP=app
      - FLASK_RUN_HOST=0.0.0.0
    depends_on:
      - db
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend

  db:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=altbau_vs_neubau
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - db_data:/var/lib/postgresql/data

  github-runner:
    build:
      context: ./github-runner-docker # <-- Wichtig: Docker wird hier dein Dockerfile finden
      dockerfile: Dockerfile          # <-- Zeigt auf das Dockerfile im neuen Ordner
    restart: always
    environment:
      - REPO_URL=${GITHUB_REPO_URL}              # Liest GITHUB_REPO_URL aus .env, stellt es im Container als REPO_URL bereit
      - RUNNER_NAME=${GITHUB_RUNNER_NAME}        # Liest GITHUB_RUNNER_NAME aus .env, stellt es im Container als RUNNER_NAME bereit
      - ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN}      # Liest GITHUB_ACCESS_TOKEN aus .env, stellt es im Container als ACCESS_TOKEN bereit
      - RUNNER_LABELS=${GITHUB_RUNNER_LABELS} 
      - REGISTRATION_TOKEN=${GITHUB_REGISTRATION_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 

volumes:
  db_data: